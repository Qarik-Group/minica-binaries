---
meta:
  name:     (( param "Please name your pipeline" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  image:
    name: starkandwayne/concourse-go
    tag: "1.13"

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - build

jobs:
  - name: build
    public: true
    serial: true
    plan:
      - get: git
      - get: minica
        params: {include_source_tarball: true}
        trigger: true
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: git
            - name: minica
              path: app
          outputs:
            - name: gh
            - name: notifications
          run:
            # path: ./git/ci/scripts/build.sh
            # args: []
            path: bash
            args:
            - -ec
            - |
              TARGETS=${TARGETS:-linux/amd64 darwin/amd64}
              VERSION=$(cat app/version)

              go get github.com/mitchellh/gox
              if [[ -n ${STATIC_BINARY} && ${STATIC_BINARY} != "false" ]]; then
                echo "Creating static binary"
                export CGO_ENABLED=0
              fi

              artifacts=$PWD/gh/artifacts
              echo "v${VERSION}"           > gh/tag
              echo "${BINARY} v${VERSION}" > gh/name
              cp app/body                    gh/notes.md

              mkdir -p ${artifacts}
              (
                cd app
                tar xfz source.tar.gz
                cd *${BINARY}*/

                gox -osarch="${TARGETS}" --output="${artifacts}/${BINARY}-{{.OS}}-{{.Arch}}" -ldflags="-X main.Version=${VERSION}" ./...
                go build -o "${BINARY:?required}" -ldflags="-X main.Version=${VERSION}" ${CMD_PKG:-.}
              )
              ls -alR gh/
          params:
            BINARY: minica
            STATIC_BINARY: true
      - put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: minica
    type: github-release
    source:
      user:         jsha
      repository:   minica
      access_token: (( grab meta.github.access_token ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
